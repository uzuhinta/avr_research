
Control_LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000013e  000001d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800062  00800062  000001d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000069d  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005c9  00000000  00000000  00000915  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002c2  00000000  00000000  00000ede  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  000011a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000340  00000000  00000000  0000123c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000113  00000000  00000000  0000157c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  0000168f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 6d 00 	jmp	0xda	; 0xda <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e3       	ldi	r30, 0x3E	; 62
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 36       	cpi	r26, 0x63	; 99
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4d 00 	call	0x9a	; 0x9a <main>
  8a:	0c 94 9d 00 	jmp	0x13a	; 0x13a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <sent_data>:
{
	//while (bit_is_clear(UCSRA, UDRE));
	//UDR = chr;
	
	//while (bit_is_clear(UCSRA,UDRE)) {}; //cho den khi bit UDRE=1
	while(!(UCSRA & (1 << UDRE)));
  92:	5d 9b       	sbis	0x0b, 5	; 11
  94:	fe cf       	rjmp	.-4      	; 0x92 <sent_data>
	UDR=chr;
  96:	8c b9       	out	0x0c, r24	; 12
  98:	08 95       	ret

0000009a <main>:
volatile unsigned char data_sent = 0x80;

int main(void)
{
    //set khung truyen 57600
	UBRRH = 0;
  9a:	10 bc       	out	0x20, r1	; 32
	UBRRL =8;
  9c:	88 e0       	ldi	r24, 0x08	; 8
  9e:	89 b9       	out	0x09, r24	; 9
	//set cong xuat B
	DDRB = 0xFF;
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	87 bb       	out	0x17, r24	; 23
	
	//SET THANH GHI nhap xuat 8 bit
	UCSRA = 0x00;
  a4:	1b b8       	out	0x0b, r1	; 11
	UCSRC = (1<<URSEL)|(1<<UCSZ1) | (1<<UCSZ0);
  a6:	86 e8       	ldi	r24, 0x86	; 134
  a8:	80 bd       	out	0x20, r24	; 32
	UCSRB = (1<<RXCIE)|(1<<RXEN) |(1<<TXEN);
  aa:	88 e9       	ldi	r24, 0x98	; 152
  ac:	8a b9       	out	0x0a, r24	; 10
	sei();
  ae:	78 94       	sei
	
	//sent_data(PINB);
	
    while (1)
	{
		if(data_sent != (char)PINB)
  b0:	96 b3       	in	r25, 0x16	; 22
  b2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  b6:	98 17       	cp	r25, r24
  b8:	d9 f3       	breq	.-10     	; 0xb0 <main+0x16>
		{
			sent_data(PINB);
  ba:	86 b3       	in	r24, 0x16	; 22
  bc:	0e 94 49 00 	call	0x92	; 0x92 <sent_data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	2f e9       	ldi	r18, 0x9F	; 159
  c2:	86 e8       	ldi	r24, 0x86	; 134
  c4:	91 e0       	ldi	r25, 0x01	; 1
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	80 40       	sbci	r24, 0x00	; 0
  ca:	90 40       	sbci	r25, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x2c>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x36>
  d0:	00 00       	nop
			_delay_ms(500);
			data_sent = (char)PINB;
  d2:	86 b3       	in	r24, 0x16	; 22
  d4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  d8:	eb cf       	rjmp	.-42     	; 0xb0 <main+0x16>

000000da <__vector_13>:
		}
	}
}

ISR(USART_RXC_vect){
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
  e4:	2f 93       	push	r18
  e6:	3f 93       	push	r19
  e8:	4f 93       	push	r20
  ea:	5f 93       	push	r21
  ec:	6f 93       	push	r22
  ee:	7f 93       	push	r23
  f0:	8f 93       	push	r24
  f2:	9f 93       	push	r25
  f4:	af 93       	push	r26
  f6:	bf 93       	push	r27
  f8:	ef 93       	push	r30
  fa:	ff 93       	push	r31
	u_Data = UDR;
  fc:	8c b1       	in	r24, 0x0c	; 12
  fe:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
	if(u_Data == 0x80)
 102:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 106:	80 38       	cpi	r24, 0x80	; 128
 108:	21 f4       	brne	.+8      	; 0x112 <__vector_13+0x38>
	{
		sent_data(PINB);
 10a:	86 b3       	in	r24, 0x16	; 22
 10c:	0e 94 49 00 	call	0x92	; 0x92 <sent_data>
 110:	03 c0       	rjmp	.+6      	; 0x118 <__vector_13+0x3e>
	}
	else
	{
		PORTB = u_Data;
 112:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 116:	88 bb       	out	0x18, r24	; 24
	}

	//led_control(u_Data);
}
 118:	ff 91       	pop	r31
 11a:	ef 91       	pop	r30
 11c:	bf 91       	pop	r27
 11e:	af 91       	pop	r26
 120:	9f 91       	pop	r25
 122:	8f 91       	pop	r24
 124:	7f 91       	pop	r23
 126:	6f 91       	pop	r22
 128:	5f 91       	pop	r21
 12a:	4f 91       	pop	r20
 12c:	3f 91       	pop	r19
 12e:	2f 91       	pop	r18
 130:	0f 90       	pop	r0
 132:	0f be       	out	0x3f, r0	; 63
 134:	0f 90       	pop	r0
 136:	1f 90       	pop	r1
 138:	18 95       	reti

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
